library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity if_then_else is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
end if_then_else;

architecture behavioral of if_then_else is
begin
    P1: process (X,Y)
    begin
        if (X = Y) then
            Z <= '1';
        else
            Z <= '0';
        end if;
    end process ;
end behavioral ;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity when_else is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
end when_else;

architecture dataflow of when_else is
begin
    
    Z <= '1' when (X = Y) else '0';

end dataflow;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;


entity boolean_equation is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
end boolean_equation;

architecture dataflow of boolean_equation is
signal temp : std_logic_vector (3 downto 0);
begin
temp (3) <= not X(1) and not X(0) and not Y(1) and not Y(0);
temp (2) <= not X(1) and X(0) and not Y(1) and Y(0);
temp (1) <= X(1) and not X(0) and Y(1) and not Y(0);
temp (0) <= X(1) and X(0) and Y(1) and Y(0);
Z <= temp (3) or temp (2) or temp (1) or temp (0);
end dataflow ;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
Library UNISIM;
use UNISIM.vcomponents.all;

entity LUT_primitive is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
end LUT_primitive;

architecture primitive of LUT_primitive is 
begin


   LUT4_inst : LUT4
   generic map (
      INIT => X"8421")
   port map (
      O => Z,   -- LUT general output
      I0 => X(0), -- LUT input
      I1 => X(1), -- LUT input
      I2 => Y(0), -- LUT input
      I3 => Y(1)  -- LUT input
   );
   
end primitive;


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity comparator_top is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC_VECTOR(3 downto 0));
end comparator_top;

architecture structural of comparator_top is
-- Component Declarations
    component if_then_else is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
    end component;
    component when_else is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
    end component;
    component boolean_equation is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
    end component;
    component LUT_primitive is
    Port ( X : in STD_LOGIC_VECTOR (1 downto 0);
           Y : in STD_LOGIC_VECTOR (1 downto 0);
           Z : out STD_LOGIC);
    end component;
begin
-- Component Port Maps
    if_then_else0 : if_then_else port map(
        X => X,
        Y => Y,
        Z => Z (3));
    when_else0 : when_else port map(
        X => X,
        Y => Y,
        Z => Z (2));
